I decided to convert my fedora install into an archlinux install. Most of the partitions had been setup by fedora and how is it looked:

elatov@macair:~$df -Ph
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 3.9G     0  3.9G   0% /dev
tmpfs                    3.9G  128K  3.9G   1% /dev/shm
tmpfs                    3.9G  960K  3.9G   1% /run
tmpfs                    3.9G     0  3.9G   0% /sys/fs/cgroup
/dev/mapper/fedora-root   20G  8.2G   11G  44% /
tmpfs                    3.9G  692K  3.9G   1% /tmp
/dev/sda5                477M  140M  308M  32% /boot
/dev/sda4                200M   16M  185M   8% /boot/efi
tmpfs                    789M  8.0K  789M   1% /run/user/1000

elatov@macair:~$sudo fdisk -l

Disk /dev/sda: 113 GiB, 121332826112 bytes, 236978176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: CDC959FA-64F6-42A1-B6E0-C12080E8F40F

Device         Start       End   Sectors   Size Type
/dev/sda1         40    409639    409600   200M EFI System
/dev/sda2     409640 186509543 186099904  88.8G Apple Core storage
/dev/sda3  186509544 187779079   1269536 619.9M Apple boot
/dev/sda4  187781120 188190719    409600   200M Apple HFS/HFS+
/dev/sda5  188190720 189214719   1024000   500M Linux filesystem
/dev/sda6  189214720 236976127  47761408  22.8G Linux LVM

Disk /dev/mapper/fedora-root: 20.4 GiB, 21890072576 bytes, 42754048 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disk /dev/mapper/fedora-swap: 2.4 GiB, 2520776704 bytes, 4923392 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes

Arch Linux Bootable USB

I downloaded the iso from here https://www.archlinux.org/download/ and ended up with the following file:

elatov@macair:~$ls -l download/archlinux-2015.06.01-dual.iso
-rw-r-----@ 1 elatov  elatov  667942912 Jun 27 13:28 download/archlinux-2015.06.01-dual.iso

After plugging in the disk, I saw the following:

elatov@macair:~$diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *121.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:          Apple_CoreStorage                         95.3 GB    disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
   4:                  Apple_HFS Linux HFS+ ESP          209.7 MB   disk0s4
   5: 0FC63DAF-8483-4772-8E79-3D69D8477DE4               524.3 MB   disk0s5
   6:                  Linux LVM                         24.5 GB    disk0s6
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:                  Apple_HFS Macintosh HD           *94.9 GB    disk1
                                 Logical Volume on disk0s2
                                 4A1016AD-AB13-4A6E-9DAE-640AFBB812FB
                                 Unencrypted
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *8.0 GB     disk2
   1:                 DOS_FAT_32 USB                     8.0 GB     disk2s1

From here https://wiki.archlinux.org/index.php/USB_flash_installation_media it looks like we can just dd the iso onto the USB disk, so let's umount it:

elatov@macair:~$diskutil unmountDisk /dev/disk2
Unmount of all volumes on disk2 was successful

Now let's dd the iso onto the USB:

elatov@macair:~$sudo dd if=download/archlinux-2015.06.01-dual.iso of=/dev/rdisk2 bs=1m
637+0 records in
637+0 records out
667942912 bytes transferred in 124.024175 secs (5385586 bytes/sec)

After I rebooted I held the Option key and I saw the USB drive as a bootable device:


After I booted from it, I saw the following menu, and after selecting the first menu I saw a shell:


Since the fedora install named the LVMs with the title of "fedora" I went ahead and renamed it to be generic, just so I know what's it used for:


I went ahead and mounted the partitions and removed everything from them since they had fedora stuff on them:

I had a rooted andoid phone so I plugged it in and enabled usb tethering on it and I was able to get an IP:


### Installing Arch Linux

After I was online I ran the following to get the base install of arch linux:

pacstrap /mnt base base-devel

Then I generated the fstab file:

after that I setup the passwd and timezone for the system:

arch-chroot /mnt /bin/bash
passwd
echo macair > /etc/hostname
ln -s /usr/share/zoneinfo/America/Denver /etc/localtime
useradd -m -u 1000 -U -G wheel -s /bin/bash elatov
passwd elatov

I also enabled the wheel group to be able to use sudo:

echo "%wheel ALL=(ALL) ALL" > /etc/sudoers.d/10-grant-wheel-group

To setup the locale I modified the /etc/locale.gen to enable the desired locales ( and generated them after wards):

Prior to generating the initramfs I ensured the lvm module is included:

And now the mkinicpio command:

and then generated the config. Lastly I followed the instructions laid out in https://wiki.archlinux.org/index.php/MacBook#Installing_GRUB_to_EFI_partition_directly

# mkdir -p /boot/efi
# mount -t vfat /dev/sdXY /boot/efi

grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch_grub --recheck --debug

# mkdir -p /boot/grub/locale
sudo cp /boot/grub/locale/en\@quot.mo /boot/grub/locale/en.mo

Lastly I generated the grub menu:

grub-mkconfig -o /boot/grub/grub.cfg



### setup networking
Still using the usb tethering after I rebooted first let's install the yaourt utitility which will allow us to install packages from AUR. We can just enable their repo and then install the necessary packages as per this page:

https://archlinux.fr/yaourt-en

Prior to installing the wl kernel module, let's get the prereqs:

sudo pacman -S dkms wpa_supplicant linux-headers
sudo yaourt -S broadom-wl-dkms

Then enable the dkms service so it compiles the module when a new kernel is installed:

sudo systemctl

Now let's connect to a wireless network:

sudo wifi-menu -o

and then enable it to start on boot:

# let's enable ssh

sudo pacman -S openssh
sudo systemctl enable sshd
sudo systemctl start sshd

netctl lit
sudo netctl enable wpls3-ap-5g
sudo netctl start wpls3-ap-5g


## To add the mac os x grub menu, I followed the instructions from my previous blog:

[root@macair ~]# cat /etc/grub.d/40_custom
#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
menuentry "MacOS X Yosemite" {
        insmod hfsplus
        set root=(hd1,gpt3)
        chainloader /System/Library/CoreServices/boot.efi
        boot
}

and if you want to be the default you can set it the grub config:

[root@macair ~]# grep ^GRUB_DEFAULT /etc/default/grub
GRUB_DEFAULT="MacOS X Yosemite"

and rebuilt the config one more time:

sudo grub-mkconfig -o /boot/grub/grub.cfg


### links
http://panks.me/posts/2013/06/arch-linux-installation-with-os-x-on-macbook-air-dual-boot/

http://loicpefferkorn.net/2015/01/arch-linux-on-macbook-pro-retina-2014-with-dm-crypt-lvm-and-suspend-to-disk/

http://frankshin.com/macbook-air-62-2013-setting-it-up-with-archlinux/
