# configure the installer
git clone https://github.com/ansible/awx.git
cd awx
<git:(devel b8cba91✱) > grep -Ev '^#|^$' installer/inventory
localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"
[all:vars]
dockerhub_base=ansible
dockerhub_version=latest
awx_secret_key=awxsecret
host_port=82
use_docker_compose=true
docker_compose_dir=/data/docker/awx
pg_hostname=ub.kar.int
pg_username=awx
pg_password=awxpass
pg_database=awx
pg_port=5432

# Configure postgresql

## Crate db in postgresql
<> createdb -h ub -U postgres awx
Password:
<> createuser -h ub -U postgres awx
Password:
<> psql -h ub -U postgres
Password for user postgres:
psql (10.1)
Type "help" for help.

postgres=# alter user awx with encrypted password 'awxpass';
ALTER ROLE
postgres=# grant all privileges on database awx to awx;
GRANT
postgres-# \q

### run the installer
# install ansible
sudo apt-add-repository ppa:ansible/ansible
<> sudo apt install ansible
<> ansible --version
ansible 2.4.2.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/elatov/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/dist-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]

  <git:(devel b8cba91✱) > ansible-playbook -i inventory install.yml

  PLAY [Build and deploy AWX] ****************************************************

  TASK [check_vars : include_tasks] **********************************************
  skipping: [localhost]

  TASK [check_vars : include_tasks] **********************************************
  included: /home/elatov/awx/installer/check_vars/tasks/check_docker.yml for localhost

  TASK [check_vars : postgres_data_dir should be defined] ************************
  skipping: [localhost]

  TASK [check_vars : host_port should be defined] ********************************
  ok: [localhost] => {
      "changed": false,
      "msg": "All assertions passed"
  }

  TASK [image_build : Get Version from checkout if not provided] *****************
  skipping: [localhost]

  TASK [image_build : Set global version if not provided] ************************
  skipping: [localhost]

  TASK [image_build : Verify awx-logos directory exists for official install] ****
  skipping: [localhost]

  TASK [image_build : Copy logos for inclusion in sdist] *************************
  skipping: [localhost]

  TASK [image_build : Set sdist file name] ***************************************
  skipping: [localhost]

  TASK [image_build : AWX Distribution] ******************************************
  skipping: [localhost]

  TASK [image_build : Stat distribution file] ************************************
  skipping: [localhost]

  TASK [image_build : Clean distribution] ****************************************
  skipping: [localhost]

  TASK [image_build : Build sdist builder image] *********************************
  skipping: [localhost]

  TASK [image_build : Build AWX distribution using container] ********************
  skipping: [localhost]

  TASK [image_build : Build AWX distribution locally] ****************************
  skipping: [localhost]

  TASK [image_build : Set docker build base path] ********************************
  skipping: [localhost]

  TASK [image_build : Set awx_web image name] ************************************
  skipping: [localhost]

  TASK [image_build : Set awx_task image name] ***********************************
  skipping: [localhost]

  TASK [image_build : Ensure directory exists] ***********************************
  skipping: [localhost]

  TASK [image_build : Stage sdist] ***********************************************
  skipping: [localhost]

  TASK [image_build : Template web Dockerfile] ***********************************
  skipping: [localhost]

  TASK [image_build : Template task Dockerfile] **********************************
  skipping: [localhost]

  TASK [image_build : Stage launch_awx] ******************************************
  skipping: [localhost]

  TASK [image_build : Stage launch_awx_task] *************************************
  skipping: [localhost]

  TASK [image_build : Stage nginx.conf] ******************************************
  skipping: [localhost]

  TASK [image_build : Stage supervisor.conf] *************************************
  skipping: [localhost]

  TASK [image_build : Stage supervisor_task.conf] ********************************
  skipping: [localhost]

  TASK [image_build : Stage settings.py] *****************************************
  skipping: [localhost]

  TASK [image_build : Stage requirements] ****************************************
  skipping: [localhost]

  TASK [image_build : Stage Makefile] ********************************************
  skipping: [localhost]

  TASK [image_build : State ansible repo] ****************************************
  skipping: [localhost]

  TASK [image_build : State ansible repo key] ************************************
  skipping: [localhost]

  TASK [image_build : Build base web image] **************************************
  skipping: [localhost]

  TASK [image_build : Build base task image] *************************************
  skipping: [localhost]

  TASK [image_build : Clean docker base directory] *******************************
  skipping: [localhost]

  TASK [openshift : Authenticate with OpenShift] *********************************
  skipping: [localhost]

  TASK [openshift : Get Project Detail] ******************************************
  skipping: [localhost]

  TASK [openshift : Get Postgres Service Detail] *********************************
  skipping: [localhost]

  TASK [openshift : Create AWX Openshift Project] ********************************
  skipping: [localhost]

  TASK [openshift : Mark Openshift User as Admin] ********************************
  skipping: [localhost]

  TASK [openshift : Set docker registry password] ********************************
  skipping: [localhost]

  TASK [openshift : Set docker registry password] ********************************
  skipping: [localhost]

  TASK [openshift : Authenticate with Docker registry] ***************************
  skipping: [localhost]

  TASK [openshift : Wait for Openshift] ******************************************
  skipping: [localhost]

  TASK [openshift : Tag and push web image to registry] **************************
  skipping: [localhost]

  TASK [openshift : Wait for the registry to settle] *****************************
  skipping: [localhost]

  TASK [openshift : Tag and push task image to registry] *************************
  skipping: [localhost]

  TASK [openshift : Enable image stream lookups for awx images] ******************
  skipping: [localhost]

  TASK [openshift : Set full web image path] *************************************
  skipping: [localhost]

  TASK [openshift : Set full task image path] ************************************
  skipping: [localhost]

  TASK [openshift : Set DockerHub Image Paths] ***********************************
  skipping: [localhost]

  TASK [openshift : Deploy and Activate Postgres] ********************************
  skipping: [localhost]

  TASK [openshift : Wait for Postgres to activate] *******************************
  skipping: [localhost]

  TASK [openshift : Set openshift base path] *************************************
  skipping: [localhost]

  TASK [openshift : Ensure directory exists] *************************************
  skipping: [localhost]

  TASK [openshift : Template Openshift AWX Config] *******************************
  skipping: [localhost]

  TASK [openshift : Template Openshift AWX Deployment] ***************************
  skipping: [localhost]

  TASK [openshift : Apply Configmap] *********************************************
  skipping: [localhost]

  TASK [openshift : Apply Deployment] ********************************************
  skipping: [localhost]

  TASK [kubernetes : Set the Kubernetes Context] *********************************
  skipping: [localhost]

  TASK [kubernetes : Get Namespace Detail] ***************************************
  skipping: [localhost]

  TASK [kubernetes : Get Postgres Service Detail] ********************************
  skipping: [localhost]

  TASK [kubernetes : Create AWX Kubernetes Project] ******************************
  skipping: [localhost]

  TASK [kubernetes : Authenticate with Docker registry] **************************
  skipping: [localhost]

  TASK [kubernetes : Wait for Openshift] *****************************************
  skipping: [localhost]

  TASK [kubernetes : Tag and push web image to registry] *************************
  skipping: [localhost]

  TASK [kubernetes : Wait for the registry to settle] ****************************
  skipping: [localhost]

  TASK [kubernetes : Tag and push task image to registry] ************************
  skipping: [localhost]

  TASK [kubernetes : Set full web image path] ************************************
  skipping: [localhost]

  TASK [kubernetes : Set full task image path] ***********************************
  skipping: [localhost]

  TASK [kubernetes : Set DockerHub Image Paths] **********************************
  skipping: [localhost]

  TASK [kubernetes : Deploy and Activate Postgres] *******************************
  skipping: [localhost]

  TASK [kubernetes : Set postgresql hostname to helm package service] ************
  skipping: [localhost]

  TASK [kubernetes : Wait for Postgres to activate] ******************************
  skipping: [localhost]

  TASK [kubernetes : Set kubernetes base path] ***********************************
  skipping: [localhost]

  TASK [kubernetes : Ensure directory exists] ************************************
  skipping: [localhost]

  TASK [kubernetes : Template Kubernetes AWX Config] *****************************
  skipping: [localhost]

  TASK [kubernetes : Template Kubernetes AWX Deployment] *************************
  skipping: [localhost]

  TASK [kubernetes : Apply Configmap] ********************************************
  skipping: [localhost]

  TASK [kubernetes : Apply Deployment] *******************************************
  skipping: [localhost]

  TASK [local_docker : Export Docker web image if it isnt local and there isnt a registry defined] ***
  skipping: [localhost]

  TASK [local_docker : Export Docker task image if it isnt local and there isnt a registry defined] ***
  skipping: [localhost]

  TASK [local_docker : Authenticate with Docker registry if registry password given] ***
  skipping: [localhost]

  TASK [local_docker : Set docker base path] *************************************
  skipping: [localhost]

  TASK [local_docker : Ensure directory exists] **********************************
  skipping: [localhost]

  TASK [local_docker : Copy web image to docker execution] ***********************
  skipping: [localhost]

  TASK [local_docker : Copy task image to docker execution] **********************
  skipping: [localhost]

  TASK [local_docker : Load web image] *******************************************
  skipping: [localhost]

  TASK [local_docker : Load task image] ******************************************
  skipping: [localhost]

  TASK [local_docker : include_role] *********************************************
  skipping: [localhost]

  TASK [local_docker : Set full image path for local install] ********************
  skipping: [localhost]

  TASK [local_docker : Set DockerHub Image Paths] ********************************
  ok: [localhost]

  TASK [local_docker : Activate postgres container] ******************************
  skipping: [localhost]

  TASK [local_docker : Activate rabbitmq container] ******************************
  skipping: [localhost]

  TASK [local_docker : Activate memcached container] *****************************
  skipping: [localhost]

  TASK [local_docker : Wait for postgres and rabbitmq to activate] ***************
  skipping: [localhost]

  TASK [local_docker : Set properties without postgres for awx_web] **************
  skipping: [localhost]

  TASK [local_docker : Set properties with postgres for awx_web] *****************
  skipping: [localhost]

  TASK [local_docker : Set properties without postgres for awx_task] *************
  skipping: [localhost]

  TASK [local_docker : Set properties with postgres for awx_task] ****************
  skipping: [localhost]

  TASK [local_docker : Activate AWX Web Container] *******************************
  skipping: [localhost]

  TASK [local_docker : Activate AWX Task Container] ******************************
  skipping: [localhost]

  TASK [local_docker : Create /data/docker/awx directory] ************************
  ok: [localhost]

  TASK [local_docker : Create docker-compose.yml file] ***************************
  changed: [localhost]

  TASK [local_docker : Start the containers] *************************************
  changed: [localhost]

  PLAY RECAP *********************************************************************
  localhost                  : ok=6    changed=2    unreachable=0    failed=0

  confirm the containers are running:

  <> cd /data/docker/awx
  <> docker-compose ps
      Name             Command             State              Ports
-------------------------------------------------------------------------
awx_memcached_1    docker-            Up                 11211/tcp
                   entrypoint.sh
                   memcached
awx_rabbitmq_1     docker-            Up                 25672/tcp,
                   entrypoint.sh                         4369/tcp,
                   rabbi ...                             5671/tcp,
                                                         5672/tcp
awx_task_1         /tini -- /bin/sh   Up                 8052/tcp
                   -c /usr/b ...
awx_web_1          /tini -- /bin/sh   Up                 0.0.0.0:82->8052
                   -c /usr/b ...                         /tcp

In the UI, let's create a template job to be executed. First go to Credentials and add your SSH key which will be used to login to the hosts:

Then create a project, which is covered here:

http://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html

Here is the sample git repo I copied from:

https://github.com/ansible/tower-example

I just created a simple git repo with the following files:

<git:(master ec76c89) > tree
.
├── inventory
├── playbooks
│   └── hw.yml
└── roles
    └── requirements.yml

Then when adding the project, point to the git repo:

The inventory file contains a list of hosts to be managed. Instructions are covered here:
http://docs.ansible.com/ansible-tower/latest/html/userguide/inventories.html#sourced-from-a-project

So now let's create an inventory and point to this Project's File:

Then if you go to the Hosts tab of the inventory you will see all the hosts:

Lastly create a template under Templates and point to:

* Inventory
* Project
* Playbook
* Credential

Then after saving the template, you will see a "Launch" button and upon clicking that it will run your play book:

You can also create schedules associated with the template:

And you have a lot of options for sending notifications:

Then after creating an notification type you can choose which one to use and for what types of results for a template:

And you will get the following email when your job succeeds or fails:

BTW if you want to install any role from galaxy you can follow instructions laid out in http://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html#ansible-galaxy-support

### Using tower-cli

We can also install tower-cli and run the commands remotely. The configuration and installation are covered here:

http://tower-cli.readthedocs.io/en/latest/quickstart.html
http://tower-cli.readthedocs.io/en/latest/install.html

On my Mac I ran the following to first install the **tower-cli**:

<> pip2 install ansible-tower-cli
Collecting ansible-tower-cli
  Downloading ansible-tower-cli-3.2.1.tar.gz (153kB)
    100% |████████████████████████████████| 163kB 2.1MB/s
Collecting click>=2.1 (from ansible-tower-cli)
  Downloading click-6.7-py2.py3-none-any.whl (71kB)
    100% |████████████████████████████████| 71kB 6.9MB/s
Collecting colorama>=0.3.1 (from ansible-tower-cli)
  Downloading colorama-0.3.9-py2.py3-none-any.whl
Requirement already satisfied: requests>=2.3.0 in /usr/local/lib/python2.7/site-packages (from ansible-tower-cli)
Requirement already satisfied: six>=1.7.2 in /usr/local/lib/python2.7/site-packages (from ansible-tower-cli)
Collecting PyYAML>=3.10 (from ansible-tower-cli)
  Downloading PyYAML-3.12.tar.gz (253kB)
    100% |████████████████████████████████| 256kB 3.2MB/s
Requirement already satisfied: idna<2.7,>=2.5 in /usr/local/lib/python2.7/site-packages (from requests>=2.3.0->ansible-tower-cli)
Requirement already satisfied: urllib3<1.23,>=1.21.1 in /usr/local/lib/python2.7/site-packages (from requests>=2.3.0->ansible-tower-cli)
Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python2.7/site-packages (from requests>=2.3.0->ansible-tower-cli)
Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python2.7/site-packages (from requests>=2.3.0->ansible-tower-cli)
Building wheels for collected packages: ansible-tower-cli, PyYAML
  Running setup.py bdist_wheel for ansible-tower-cli ... done
  Stored in directory: /Users/elatov/Library/Caches/pip/wheels/bc/6b/92/ee8411accbb50179b77ebafa3d6508607d4ec1e4e3339fc913
  Running setup.py bdist_wheel for PyYAML ... done
  Stored in directory: /Users/elatov/Library/Caches/pip/wheels/2c/f7/79/13f3a12cd723892437c0cfbde1230ab4d82947ff7b3839a4fc
Successfully built ansible-tower-cli PyYAML
Installing collected packages: click, colorama, PyYAML, ansible-tower-cli
Successfully installed PyYAML-3.12 ansible-tower-cli-3.2.1 click-6.7 colorama-0.3.9

Then configured it:

<> tower-cli config host http://192.168.1.106:82
<> tower-cli config username admin
<> tower-cli config password password
<> tower-cli config verify_ssl false

Lastly to make sure it works:

<> tower-cli job_template list
== ================= ========= ======= ================
id       name        inventory project     playbook
== ================= ========= ======= ================
 5 Demo Job Template         1       4 hello_world.yml
 8 karim-test                3       6 playbooks/hw.yml
== ================= ========= ======= ================

You can even run a job and monitor it:

<> tower-cli job launch -J 8 --monitor
------Starting Standard Out Stream------
Identity added: /tmp/awx_20_REewdT/credential_2 (/tmp/awx_20_REewdT/credential_2)

PLAY [Hello World Sample] ******************************************************


TASK [Gathering Facts] *********************************************************
ok: [10.0.0.2]

TASK [Hello Message] ***********************************************************
ok: [10.0.0.2] => {
    "msg": "Hello World!"
}

PLAY RECAP *********************************************************************
10.0.0.2                   : ok=2    changed=0    unreachable=0    failed=0

------End of Standard Out Stream--------
Resource changed.
== ============ =========================== ========== =======
id job_template           created             status   elapsed
== ============ =========================== ========== =======
20            8 2018-02-03T23:38:09.129636Z successful 8.521
== ============ =========================== ========== =======

Pretty cool stuff.

Roles usage:

http://docs.ansible.com/ansible/latest/playbooks_reuse_roles.html#roles
https://docs.ansible.com/ansible/2.4/playbooks_reuse.html
