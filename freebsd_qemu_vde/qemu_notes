cd /usr/ports/emulators/qemu
elatov@freebsd:/usr/ports/emulators/qemu>make showconfig
===> The following configuration options are available for qemu-0.11.1_11:
     ADD_AUDIO=off: Emulate more audio hardware (experimental!)
     ALL_TARGETS=on: Also build non-x86 targets
     CDROM_DMA=on: IDE CDROM DMA
     CURL=on: libcurl dependency (remote images)
     GNS3=off: gns3 patches (udp, promiscuous multicast)
     GNUTLS=on: gnutls dependency (vnc encryption)
     KQEMU=on: Build with (alpha!) accelerator module
     PCAP=on: pcap dependency (networking with bpf)
     RTL8139_TIMER=off: allow use of re(4) nic with FreeBSD guests
     SAMBA=off: samba dependency (for -smb)
     SDL=on: SDL/X dependency (graphical output)
===> Use 'make config' to modify these settings

add the following to /etc/rc.conf
---
kqemu_enable="YES
---

This will load the kqemu module and it will also check if the aio module is
loaded, and if it's not it will load it as well.

Before rebooting load them manually and make sure they load properly:

---
elatov@freebsd:~>sudo kldload kqemu
elatov@freebsd:~>sudo kldload aio
elatov@freebsd:~>kldstat 
Id Refs Address    Size     Name
 1    7 0xc0400000 e9ec64   kernel
 2    1 0xc6451000 e000     fuse.ko
 3    1 0xcd147000 21000    kqemu.ko
 4    1 0xcd168000 8000     aio.ko
---

That looks good.

as a quick test create an img file:

---
qemu-img create -f raw rhel2.img 8G
---

and then start up a VM using that img file as the hard drive:

---
qemu -cdrom ../rhel-server-5.5-i386-dvd.iso -hda rhel2.img -m 256 -boot d
-kernel-kqemu -vnc :0 -localtime
---

Now from the fedora machine, install a vnc client:

---
moxz.dnsd.me:~>sudo yum install tigervnc
---

After it's installed tried to connec to your VM:

---
moxz.dnsd.me:~>vncviewer 192.168.1.101:5900
---

It showed up just fine. Now if you want your VM to have access to the network
then we have a couple of options. From 
---
http://wiki.qemu.org/Documentation/Networking
---

Since jarret already did a post on the bridged networking, I decided to try
out the VDE setup. First let's install the VDE Package:

---
elatov@freebsd:~>cd /usr/ports/net/vde2
elatov@freebsd:/usr/ports/net/vde2>sudo make install clean
---

Here is the config I used:

---
elatov@freebsd:/usr/ports/net/vde2>make showconfig
===> The following configuration options are available for vde2-2.3.2:
     PYTHON=on: Python bindings
===> Use 'make config' to modify these settings
---

After that is installed we should create a tap interface to act as an uplink
for our VDE-switch. First let's create the bridge:

---
elatov@freebsd:~>sudo ifconfig bridge0 create
---

Then let's create the tap interface:

---
elatov@freebsd:~>sudo ifconfig tap0 create
---

Now let's bridge our physical interface with our tap interfac:

---
elatov@freebsd:~>sudo ifconfig bridge0 addm em0 addm tap0 up
---

Now checking the settings of both interfaces:

---
elatov@freebsd:~>ifconfig bridge0
bridge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        ether 02:84:95:2c:24:00
        nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
        id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
        maxage 20 holdcnt 6 proto rstp maxaddr 100 timeout 1200
        root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0
        member: tap0 flags=143<LEARNING,DISCOVER,AUTOEDGE,AUTOPTP>
                ifmaxaddr 0 port 8 priority 128 path cost 2000000
        member: em0 flags=143<LEARNING,DISCOVER,AUTOEDGE,AUTOPTP>
                ifmaxaddr 0 port 1 priority 128 path cost 200000
---

We see both interfaces there, and our tap0 interface:

---
elatov@freebsd:~>ifconfig tap0
tap0: flags=8902<BROADCAST,PROMISC,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=80000<LINKSTATE>
        ether 00:bd:e4:d8:f1:00
        nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
---

Since we will connecting to the tap device with regular users, let's allow
regular uses to connect to our tap device:

---
elatov@freebsd:~>sudo sysctl net.link.tap.user_open=1
net.link.tap.user_open: 0 -> 1
elatov@freebsd:~>sudo sysctl net.link.tap.up_on_open=1
net.link.tap.up_on_open: 0 -> 1
---

Also let's fix the permissions on the file for tap0:

---
elatov@freebsd:~>sudo chown :elatov /dev/tap0
elatov@freebsd:~>sudo chmod 660 /dev/tap0
---

Now confirming the permissions:

---
elatov@freebsd:~>ls -l /dev/tap0
crw-rw----  1 root  elatov    0, 109 Feb  3 16:14 /dev/tap0
---

That looks good. Now let's create a VDE-Switch and add tap0 as our uplink:

---
elatov@freebsd:~>sudo vde_switch -d -s /tmp/vde1 -M /tmp/mgmt1 -tap tap0 -m
660 -g elatov --mgmtmode 660 --mgmtgroup elatov
---

Here are all the arguement explained:

---
-d          option tells vde_switch to run as daemon or background process.
-s          is the complete path to data socket for the switch.
-M          specifies where to create the management socket for the switch.
-t          specifies the tap interface name that connected to the switch.
-m          specifes mode of data sockets 
-g          specified group owner of sockets (mgmt and data)
--mgmtmode  specifies mode of mgmt socket
--mgmtgroup specifies group owner of mgmt socket 
---


Now login into the switch:

---
elatov@freebsd:~>unixterm /tmp/mgmt1
VDE switch V.2.3.2
(C) Virtual Square Team (coord. R. Davoli) 2005,2006,2007 - GPLv2

vde$ ds/showinfo
0000 DATA END WITH '.'
ctl dir /tmp/vde1
std mode 0660
.
1000 Success

vde$ port/allprint
0000 DATA END WITH '.'
Port 0001 untagged_vlan=0000 ACTIVE - Unnamed Allocatable
 Current User: NONE Access Control: (User: NONE - Group: NONE)
  -- endpoint ID 0007 module tuntap      : tap0
.
1000 Success

vde$ vlan/allprint
0000 DATA END WITH '.'
VLAN 0000
 -- Port 0001 tagged=0 active=1 status=Forwarding
.
1000 Success
---

Most of the information for the VDE was taken from here:

---
http://wiki.virtualsquare.org/wiki/index.php/VLAN_trunking
---

BTW there is also a web and telnet client for the switch. Instructions on how
to set that up are here:

---
http://wiki.virtualsquare.org/wiki/index.php/Vdetelweb:_Telnet_and_Web_management_for_VDE
---

'unixterm' was good enough for me :)

Now starting up the VM and connecting it to our VDE-Switch:

---
elatov@freebsd:~>vdeqemu -hda rhel2.img -m 256 -kernel-kqemu -vnc :0
-localtime -no-acpi -net vde,sock=/tmp/vde1 -net nic,model=e1000
---

Now checking out the switch ports:

---
elatov@freebsd:~>unixterm /tmp/mgmt1
VDE switch V.2.3.2
(C) Virtual Square Team (coord. R. Davoli) 2005,2006,2007 - GPLv2

vde$ port/allprint
0000 DATA END WITH '.'
Port 0001 untagged_vlan=0000 ACTIVE - Unnamed Allocatable
 Current User: NONE Access Control: (User: NONE - Group: NONE)
  -- endpoint ID 0007 module tuntap      : tap0
Port 0002 untagged_vlan=0000 ACTIVE - Unnamed Allocatable
 Current User: elatov Access Control: (User: NONE - Group: NONE)
  -- endpoint ID 0003 module unix prog   : vdeqemu user=elatov PID=98624
SSH=192.168.1.102
.
1000 Success
---

We can see that now our VM is connected to the VDE-Switch. Since all the
traffic is going through our tap0 interface, we can actually run tcpdump on it
to see what traffic our VM is sending. Let's ping a machine on the local
subnet from the vm and see what we see on the tap0 interface. Here is the
capture from the host as the ping is going:

---
elatov@freebsd:~>sudo tcpdump -i tap0 -n host 192.168.1.110 and icmp 
tcpdump: WARNING: tap0: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on tap0, link-type EN10MB (Ethernet), capture size 65535 bytes
17:40:01.353744 IP 192.168.1.110 > 192.168.1.102: ICMP echo request, id 12298,
seq 1, length 64
17:40:01.353957 IP 192.168.1.102 > 192.168.1.110: ICMP echo reply, id 12298,
seq 1, length 64
---

If you didn't guess it, the VM's IP is 192.168.1.110. You can also monitor
traffic using file sockets. In depth instructions are laid out here:

---
http://wiki.virtualsquare.org/wiki/index.php/VDE_Basic_Networking
---

Since we don't want to keep recreating the above settings let's setup all the
above options/settings to be auto configured on boot. We already enabled the
qemu module to be loaded on boot, now let's setup the bridge and tap interface
to be created on boot. Add the following to the /etc/rc.conf file:

---
cloned_interfaces="tap0 bridge0
ifconfig_bridge0="addm em0 addm tap0 up"
---

Now let's enable the sysctl options. Add the following to your
/etc/sysctl.conf file:

---
net.link.tap.user_open=1
net.link.tap.up_on_open=1
---

Now setup the appropriate permissions for our tap0 device. Add the following
to your /etc/devfs.conf file:

---
own     tap0    root:elatov
perm    tap0    660
---

Lastly create the VDE-Switch boot. Add the following to your /etc/rc.local
file:

---
/usr/local/bin/vde_switch -d -s /tmp/vde1 -M /tmp/mgmt1 -tap tap0 -m 660 -g elatov --mgmtmode 660 --mgmtgroup elatov
---

So I rebooted the freebsd machine and I wanted to make sure all the settings
looks good. First I wanted to make sure my bridge0 and tap0 interfaces were
setup:

---
elatov@freebsd:~>ifconfig tap0
tap0: flags=8942<BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> metric 0 mtu
1500
        options=80000<LINKSTATE>
        ether 00:bd:90:1a:00:00
        nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
        Opened by PID 1422
---

and the bridge0 interface:

---
elatov@freebsd:~>ifconfig bridge0
bridge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        ether 02:84:95:2c:24:00
        nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
        id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
        maxage 20 holdcnt 6 proto rstp maxaddr 100 timeout 1200
        root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0
        member: tap0 flags=143<LEARNING,DISCOVER,AUTOEDGE,AUTOPTP>
                ifmaxaddr 0 port 7 priority 128 path cost 2000000
        member: em0 flags=143<LEARNING,DISCOVER,AUTOEDGE,AUTOPTP>
                ifmaxaddr 0 port 1 priority 128 path cost 2000000
---

That looked good. Next I wanted to make sure my VDE-Switch was created:

---
elatov@freebsd:~>unixterm /tmp/mgmt1
VDE switch V.2.3.2
(C) Virtual Square Team (coord. R. Davoli) 2005,2006,2007 - GPLv2

vde$ ds/showinfo
0000 DATA END WITH '.'
ctl dir /tmp/vde1
std mode 0660
.
1000 Success

vde$ port/allprint
0000 DATA END WITH '.'
Port 0001 untagged_vlan=0000 ACTIVE - Unnamed Allocatable
 Current User: NONE Access Control: (User: NONE - Group: NONE)
  -- endpoint ID 0007 module tuntap      : tap0
.
1000 Success
---

That looked good, we even see the tap0 device connected. Then I wanted to make
sure the persmission on my tap0 device were correct:

---
elatov@freebsd:~>ls -l /dev/tap0
crw-rw----  1 root  elatov    0, 102 Feb  3 18:00 /dev/tap0
---

and I wanted to make sure the sysctl settings looked good as well:

---
elatov@freebsd:~>sysctl net.link.tap.user_open
net.link.tap.user_open: 1
elatov@freebsd:~>sysctl net.link.tap.up_on_open
net.link.tap.up_on_open: 1
---

And lastly I wanted to make sure the kernel modules were loaded:

---
elatov@freebsd:~>kldstat 
Id Refs Address    Size     Name
 1   13 0xc0400000 e9ec64   kernel
 2    1 0xc62de000 5000     if_tap.ko
 3    1 0xc6302000 9000     if_bridge.ko
 4    1 0xc630b000 6000     bridgestp.ko
 5    1 0xc647c000 e000     fuse.ko
 6    1 0xc64ef000 8000     aio.ko
 7    1 0xc64fa000 21000    kqemu.ko
---

Everything looked good. 

As Jarret mentioned in his post there are a lot of way to go about it. Here is web page with all the different ways:

---
http://www.linux-kvm.org/page/Management_Tools
---

But checking over the freebsd ports, I only found the following:

---
virt-manager
virtinst
aqemu
virsh
---

all depend on the libvirt libraries. After further investigation it turned out
that libvirt and VDE don't work together... yet. From here:

---
https://gist.github.com/1787749
---

Here is a snippet:

---
For generic situations libvirt and virt-manager are useful tools to help
manage VM clusters. ubuntu-vm-builder is useful for creating VMs and adding
them to libvirt hosts.
VDE and libvirt Don't Play Together

Unfortunately libvirt doesn't currently support VDE networks, although it is
possible for someone to implement a VDE interface using the libvirt network
API.
---

I was planning on only running 2 VMs so this wasn't a big deal for me. 
