### Updating jenkins kubernetes deployment

Most of the instructions are here: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment

You can update using 3 different methods:

https://tachingchen.com/blog/Kubernetes-Rolling-Update-with-Deployment/

Nice overview between replicasets and deployments:

https://ryaneschinger.com/blog/rolling-updates-kubernetes-replication-controllers-vs-deployments/

currently it doesn't auto update:

https://github.com/kubernetes/kubernetes/issues/33664

set the new image:

<> kubectl set image deployment/jenkins jenkins=jenkins/jenkins:2.73.3
deployment "jenkins" image updated

Now you will see two replica sets:

<> kubectl get rs
NAME                 DESIRED   CURRENT   READY     AGE
jenkins-554f449b64   0         0         0         23h
jenkins-f557b8866    1         1         1         21s

But only one pod and it will be with a new name:

<> kubectl get pods
NAME                      READY     STATUS    RESTARTS   AGE
jenkins-f557b8866-jjhvr   1/1       Running   0          38s

You can also get a more verbose output:

<> kubectl describe deployments
Name:                   jenkins
Namespace:              default
CreationTimestamp:      Sat, 02 Dec 2017 19:10:15 -0700
Labels:                 io.kompose.service=jenkins
Annotations:            deployment.kubernetes.io/revision=2
                        kompose.cmd=kompose convert
                        kompose.version=1.4.0 (c7964e7)
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{"kompose.cmd":"kompose convert","kompose.version":"1.4.0 (c7964e7)"},...
Selector:               io.kompose.service=jenkins
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 1 max surge
Pod Template:
  Labels:  io.kompose.service=jenkins
  Containers:
   jenkins:
    Image:        jenkins/jenkins:2.73.3
    Ports:        8080/TCP, 50000/TCP
    Environment:  <none>
    Mounts:
      /var/jenkins_home from jenkins-home (rw)
  Volumes:
   jenkins-home:
    Type:  HostPath (bare host directory volume)
    Path:  /data/shared/jenkins/jenkins_home
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  <none>
NewReplicaSet:   jenkins-f557b8866 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  1m    deployment-controller  Scaled up replica set jenkins-f557b8866 to 1
  Normal  ScalingReplicaSet  1m    deployment-controller  Scaled down replica set jenkins-554f449b64 to 0

If you used --record during the initial deployment, you can see what changes are done to the deployment:

<> kubectl rollout history deployment/jenkins
deployments "jenkins"
REVISION  CHANGE-CAUSE
1         <none>
2         kubectl apply --filename=jenkins-deployment.yaml --record=true

You should all see the following in the logs:

kubectl logs --namespace=kube-system po/kube-controller-manager-ub
I1217 22:59:01.066072       1 event.go:218] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"default", Name:"jenkins", UID:"19efeaea-d7cf-11e7-a095-0c4de99d45d5", APIVersion:"extensions", ResourceVersion:"2571230", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set jenkins-7899cc8d4 to 1
I1217 22:59:01.070936       1 event.go:218] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"default", Name:"jenkins", UID:"19efeaea-d7cf-11e7-a095-0c4de99d45d5", APIVersion:"extensions", ResourceVersion:"2571230", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled down replica set jenkins-7484577686 to 0
I1217 22:59:01.079696       1 event.go:218] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"default", Name:"jenkins-7484577686", UID:"902e2fe2-db9c-11e7-babd-0c4de99d45d5", APIVersion:"extensions", ResourceVersion:"2571234", FieldPath:""}): type: 'Normal' reason: 'SuccessfulDelete' Deleted pod: jenkins-7484577686-7bkrp
I1217 22:59:01.079731       1 event.go:218] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"default", Name:"jenkins-7899cc8d4", UID:"df0c50f5-e37d-11e7-81ea-0c4de99d45d5", APIVersion:"extensions", ResourceVersion:"2571231", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: jenkins-7899cc8d4-fpdhz

You can also run something like this to get each version of the resource:

<> for i in $(kubectl get rs --no-headers -o custom-columns=:.metadata.name); do echo $i; kubectl describe rs/$i| grep Image; done
jenkins-5f7d7d8cf
    Image:  jenkins/jenkins:2.73.3
jenkins-7484577686
    Image:  jenkins/jenkins:2.89.1
jenkins-7899cc8d4
    Image:  jenkins/jenkins:2.89.2
